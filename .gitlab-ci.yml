variables:
  PUBLIC_REPO_URL: git@github.com:ProtonVPN/win-app.git

stages:
  - bot # comes from translations/generator job
  - build
  - test
  - sign
  - build-installer
  - ui-test
  - installation-test
  - mirror

sign:
  stage: sign
  tags:
    - windows
  script:
    - echo "Signing files..."
    - python ci\main.py sign
  artifacts:
    expire_in: 1 day
    paths:
      - src/bin/

build-release:
  stage: build
  tags:
    - windows
  script:
    - echo "Restoring NuGet Packages..."
    - 'c:\nuget\nuget.exe restore ProtonVpn.sln'
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Release /verbosity:quiet "src\\ProtonVPN.MarkupValidator\\ProtonVPN.MarkupValidator.csproj"
    - echo "Downloading translations from crowdin..."
    - git clone -b windows-vpn --single-branch "https://gitlab-ci-token:${CI_JOB_TOKEN}@${I18N_CACHE_REPO}" --depth 1
    - python ci\main.py add-languages
    - python ci\main.py add-commit-hash $env:CI_COMMIT_SHORT_SHA
    - echo "Building release..."
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Release /verbosity:quiet "ProtonVpn.sln"
  artifacts:
    expire_in: 1 day
    paths:
      - src/bin/
  only:
    - master
    - /^release.*$/
  variables:
    GIT_SUBMODULE_STRATEGY: normal

build-debug:
  stage: build
  tags:
    - windows
  script:
    - echo "Restoring NuGet Packages..."
    - 'c:\nuget\nuget.exe restore ProtonVpn.sln'
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Release /verbosity:quiet "src\\ProtonVPN.MarkupValidator\\ProtonVPN.MarkupValidator.csproj"
    - echo "Downloading translations from crowdin..."
    - git clone -b windows-vpn --single-branch "https://gitlab-ci-token:${CI_JOB_TOKEN}@${I18N_CACHE_REPO}" --depth 1
    - python ci\main.py add-languages
    - python ci\main.py add-commit-hash $env:CI_COMMIT_SHORT_SHA
    - echo "Building debug..."
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Debug /verbosity:quiet "ProtonVpn.sln"
  artifacts:
    expire_in: 1 day
    paths:
      - src/bin/
  except:
    - master
    - /^release.*$/
  variables:
    GIT_SUBMODULE_STRATEGY: normal

tests:
  stage: test
  tags:
    - windows
  script:
    - echo "Running tests..."
    - python ci\main.py tests src\bin\

build-installer-for-release:
  stage: build-installer
  tags:
    - windows
  script:
    - python ci\main.py tap-installer
    - python ci\main.py tun-installer
    - python ci\main.py update-gh-list
    - python ci\main.py app-installer $env:CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - Setup/ProtonVPN-SetupFiles/
      - Setup/ProtonVPNTun-SetupFiles/
      - Setup/ProtonVPNTap-SetupFiles/
    expire_in: 4 weeks
  only:
    - master
    - /^release.*$/

build-installer-for-debug:
  stage: build-installer
  tags:
    - windows
  script:
    - python ci\main.py tap-installer
    - python ci\main.py tun-installer
    - python ci\main.py update-gh-list
    - python ci\main.py app-installer $env:CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - Setup/ProtonVPN-SetupFiles/
    expire_in: 4 weeks
  except:
    - master
    - /^release.*$/

ui-test:
  stage: ui-test
  tags:
    - windows
  script:
    - powershell -File ci\uninstall-app.ps1
    - powershell -Command "Start-Sleep -s 25"
    - powershell -File ci\launch-installer.ps1
    - powershell -Command "Start-Sleep -s 20"
    - VSTest.Console.exe src\bin\ProtonVPN.UI.Test.dll
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: never
    - if: '$CI_COMMIT_REF_NAME == "develop"'
      when: always
    - if: '$CI_COMMIT_REF_NAME != "develop"'
      when: manual
    
installation-test:
  stage: ui-test
  tags:
    - windows
  when: manual
  script:
    - powershell -File ci\uninstall-app.ps1
    - powershell -Command "Start-Sleep -s 25"
    - powershell -File ci\launch-installer-UI.ps1
    - powershell -File ci\start-installer-tests.ps1
    - TasktTestRunner.exe

mirror:
  stage: mirror
  tags:
    - windows
  only:
    refs:
      - tags
      - master
  script:
    - python ci\main.py prepare-ssh $env:SSH_PRIVATE_KEY
    - ssh-keyscan -t rsa github.com | Set-Content "$env:userprofile\.ssh\known_hosts"
    - git clone "$CI_REPOSITORY_URL" --branch master _APP_CLONE;
    - cd _APP_CLONE
    - git remote add public $PUBLIC_REPO_URL
    - git push public master
    - git push public "$(git describe --abbrev=0)"

include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

i18n-sync-crowdin:
  variables:
      I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn'
  extends: .i18n-sync-crowdin-shared-windows

i18n-manual-sync-crowdin:
  when: manual
  only:
    - branches
  variables:
      I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn'
  extends: .i18n-sync-crowdin-shared-windows
