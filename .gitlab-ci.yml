variables:
  PUBLIC_REPO_URL: git@github.com:ProtonVPN/win-app.git

stages:
  - release
  - bot # comes from translations/generator job
  - build
  - test
  - sign
  - build-installer
  - internal-beta
  - publish-to-slack
  - ui-test
  - installation-test
  - mirror

sign:
  stage: sign
  tags:
    - windows
  script:
    - echo "Signing files..."
    - python ci\main.py sign
  artifacts:
    expire_in: 1 day
    paths:
      - src/bin/

build-release:
  stage: build
  tags:
    - windows
  script:
    - echo "Restoring NuGet Packages..."
    - 'c:\nuget\nuget.exe restore ProtonVpn.sln'
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Release /verbosity:quiet "src\\ProtonVPN.MarkupValidator\\ProtonVPN.MarkupValidator.csproj"
    - echo "Downloading translations from crowdin..."
    - git clone -b windows-vpn --single-branch "https://gitlab-ci-token:${CI_JOB_TOKEN}@${I18N_CACHE_REPO}" --depth 1
    - python ci\main.py add-languages
    - python ci\main.py add-commit-hash $env:CI_COMMIT_SHORT_SHA
    - python ci\main.py defaultConfig
    - echo "Building release..."
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Release /verbosity:quiet "ProtonVpn.sln"
  artifacts:
    expire_in: 1 day
    paths:
      - src/bin/
  only:
    - master
    - /^release.*$/
  variables:
    GIT_SUBMODULE_STRATEGY: normal

build-debug:
  stage: build
  tags:
    - windows
  script:
    - echo "Restoring NuGet Packages..."
    - 'c:\nuget\nuget.exe restore ProtonVpn.sln'
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Release /verbosity:quiet "src\\ProtonVPN.MarkupValidator\\ProtonVPN.MarkupValidator.csproj"
    - echo "Downloading translations from crowdin..."
    - git clone -b windows-vpn --single-branch "https://gitlab-ci-token:${CI_JOB_TOKEN}@${I18N_CACHE_REPO}" --depth 1
    - python ci\main.py add-languages
    - python ci\main.py add-commit-hash $env:CI_COMMIT_SHORT_SHA
    - python ci\main.py defaultConfig
    - echo "Building debug..."
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Debug /verbosity:quiet "ProtonVpn.sln"
  artifacts:
    expire_in: 1 day
    paths:
      - src/bin/
  except:
    - master
    - /^release.*$/
  variables:
    GIT_SUBMODULE_STRATEGY: normal

tests:
  stage: test
  tags:
    - windows
  script:
    - echo "Running tests..."
    - 'c:\nuget\nuget.exe restore ProtonVpn.sln'
    - MSBuild.exe /consoleloggerparameters:ErrorsOnly /maxcpucount /nologo /property:Configuration=Debug /verbosity:quiet "ProtonVpn.sln"
    - coverlet src\bin --target "vstest.console.exe" --targetargs "src/bin/ProtonVPN*Test*.dll /TestCaseFilter:TestCategory!=UI&TestCategory!=Connection /Platform:x64" --format cobertura --output .\coverage-reports --exclude "[*.Test*]*" --exclude "[ProtonVPN.MarkupValidator]*" --exclude "[TestTools*]*" --exclude "[TapInstaller]*" --exclude "[*.Installers]*"
    - powershell -Command "(gc coverage-reports.cobertura.xml) -replace '\\', '/' | Out-File -encoding UTF8 cobertura.xml"
    - ReportGenerator.exe "-reports:cobertura.xml" "-targetdir:.\code-coverage-report-html"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml

build-installer-for-release:
  stage: build-installer
  tags:
    - windows
  script:
    - python ci\main.py tap-installer
    - python ci\main.py tun-installer
    - python ci\main.py update-gh-list
    - python ci\main.py app-installer $env:CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - Setup/ProtonVPN-SetupFiles/
      - Setup/ProtonVPNTun-SetupFiles/
      - Setup/ProtonVPNTap-SetupFiles/
    expire_in: 4 weeks
  only:
    - master
    - /^release.*$/
    
prepare-internal-beta-release:
  stage: internal-beta
  tags:
    - windows
  when: manual
  script:
    - python -m pip install -r ci\python-libs.txt
    - python ci\prepare-internal-beta.py
  only:
    - /^release.*$/

build-installer-for-debug:
  stage: build-installer
  tags:
    - windows
  script:
    - python ci\main.py tap-installer
    - python ci\main.py tun-installer
    - python ci\main.py update-gh-list
    - python ci\main.py app-installer $env:CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - Setup/ProtonVPN-SetupFiles/
    expire_in: 4 weeks
  except:
    - master
    - /^release.*$/

ui-test:
  stage: ui-test
  tags:
    - ui_tests
  script:
    - powershell -File ci\uninstall-app.ps1
    - powershell -Command "Start-Sleep -s 45"
    - powershell -File ci\launch-installer.ps1
    - powershell -Command "Start-Sleep -s 45"
    - VSTest.Console.exe src\bin\ProtonVPN.UI.Test.dll /TestCaseFilter:"Category=UI"
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
    
connection-tests:
  stage: ui-test
  tags:
    - connection_tests
  script:
    - powershell -File ci\uninstall-app.ps1
    - powershell -File ci\install-the-app.ps1
    - VSTest.Console.exe src\bin\ProtonVPN.UI.Test.dll /TestCaseFilter:"Category=Connection"
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
    
update-vm:
  stage: ui-test
  tags:
    - installation_tests
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - powershell -File ci\InstallerTestScripts\update-vm.ps1
    
installation-test:
  stage: ui-test
  tags:
    - installation_tests
  when: manual
  script:
    - powershell -File ci\InstallerTestScripts\prepare-installer-tests.ps1
  except:
    - /^debug.*$/
    - release/9.9.9
    - master

mirror:
  stage: mirror
  tags:
    - windows
  only:
    refs:
      - tags
      - master
  script:
    - python ci\main.py prepare-ssh $env:SSH_PRIVATE_KEY
    - ssh-keyscan -t rsa github.com | Set-Content "$env:userprofile\.ssh\known_hosts"
    - git clone "$CI_REPOSITORY_URL" --branch master _APP_CLONE;
    - cd _APP_CLONE
    - git remote add public $PUBLIC_REPO_URL
    - git push public master
    - git push public "$(git describe --abbrev=0)"

include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

i18n-sync-crowdin:
  when: manual
  variables:
      I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn'
  extends: .i18n-sync-crowdin-common

i18n-manual-sync-crowdin:
  when: manual
  only:
    - branches
  variables:
      I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn'
  extends: .i18n-sync-crowdin-common

create-release:
  image: debian:stable-slim
  stage: release
  when: manual
  only:
    refs:
      - develop
  script:
    - apt-get update && apt-get install -y python3 python3-pip git
    - python3 ci/release.py
    
send-slack-notification:
  tags:
    - windows
  only:
    refs:
      - develop
  stage: publish-to-slack
  script:
    - python -m pip install -r ci\python-libs.txt
    - python ci\main.py send-slack-notification